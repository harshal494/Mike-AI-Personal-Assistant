Here's an example of a simple login page using HTML, CSS, and JavaScript, along with a basic backend validation using Node.js and Express.js.

**HTML (index.html)**
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login Page</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="login-container">
        <h2>Login</h2>
        <form id="login-form">
            <label for="username">Username:</label>
            <input type="text" id="username" name="username" required>

            <label for="password">Password:</label>
            <input type="password" id="password" name="password" required>

            <button type="submit">Login</button>
        </form>
        <p id="error-message"></p>
    </div>

    <script src="script.js"></script>
</body>
</html>
```

**CSS (style.css)**
```css
body {
    font-family: Arial, sans-serif;
    background-color: #f0f0f0;
}

.login-container {
    width: 300px;
    margin: 50px auto;
    background-color: #fff;
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.login-container h2 {
    text-align: center;
}

#login-form {
    margin-top: 20px;
}

label {
    display: block;
    margin-bottom: 10px;
}

input[type="text"], input[type="password"] {
    width: 100%;
    height: 40px;
    margin-bottom: 20px;
    padding: 10px;
    border: 1px solid #ccc;
}

button[type="submit"] {
    width: 100%;
    height: 40px;
    background-color: #4CAF50;
    color: #fff;
    padding: 10px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

button[type="submit"]:hover {
    background-color: #3e8e41;
}

#error-message {
    color: #f00;
    font-size: 14px;
    margin-top: 10px;
}
```

**JavaScript (script.js)**
```javascript
const loginForm = document.getElementById('login-form');
const errorMessage = document.getElementById('error-message');

loginForm.addEventListener('submit', (e) => {
    e.preventDefault();
    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;

    // Basic validation
    if (username === '' || password === '') {
        errorMessage.textContent = 'Please fill in all fields';
        return;
    }

    // Send request to server
    fetch('/login', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ username, password })
    })
    .then((res) => res.json())
    .then((data) => {
        if (data.success) {
            // Login successful, redirect to dashboard
            window.location.href = '/dashboard';
        } else {
            errorMessage.textContent = data.message;
        }
    })
    .catch((err) => {
        console.error(err);
        errorMessage.textContent = 'An error occurred';
    });
});
```

**Node.js and Express.js (server.js)**
```javascript
const express = require('express');
const app = express();
const port = 3000;

app.use(express.json());

// Mock user data
const users = [
    { id: 1, username: 'john', password: 'hello' },
    { id: 2, username: 'jane', password: 'world' }
];

app.post('/login', (req, res) => {
    const { username, password } = req.body;
    const user = users.find((u) => u.username === username && u.password === password);

    if (user) {
        // Login successful, return success message
        res.json({ success: true, message: 'Login successful' });
    } else {
        // Login failed, return error message
        res.json({ success: false, message: 'Invalid username or password' });
    }
});

app.get('/dashboard', (req, res) => {
    res.send('Welcome to the dashboard!');
});

app.listen(port, () => {
    console.log(`Server started on port ${port}`);
});
```

This is a very basic example and should not be used in production without proper security measures, such as password hashing and salting, secure password storage, and protection against common web vulnerabilities like SQL injection and cross-site scripting (XSS).